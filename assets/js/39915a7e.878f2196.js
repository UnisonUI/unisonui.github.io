"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9179],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=i,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8512:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],s={sidebar_position:1,title:"Git provider",description:"How to use the git provider"},l="Git provider",p={unversionedId:"providers/git",id:"version-1.0.0/providers/git",title:"Git provider",description:"How to use the git provider",source:"@site/versioned_docs/version-1.0.0/providers/git.md",sourceDirName:"providers",slug:"/providers/git",permalink:"/docs/providers/git",tags:[],version:"1.0.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Git provider",description:"How to use the git provider"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/getting-started/configuration"},next:{title:"Container provider",permalink:"/docs/providers/container"}},c=[{value:"How does it work",id:"how-does-it-work",children:[],level:2},{value:"Prerequisite",id:"prerequisite",children:[],level:2},{value:"Default configuration",id:"default-configuration",children:[],level:2},{value:"Specifications detection",id:"specifications-detection",children:[{value:"Version 2",id:"version-2",children:[],level:3},{value:"Version 1",id:"version-1",children:[],level:3}],level:2},{value:"Github configuration",id:"github-configuration",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git-provider"},"Git provider"),(0,o.kt)("h2",{id:"how-does-it-work"},"How does it work"),(0,o.kt)("p",null,"The git provider is used to retrieve specification files from ",(0,o.kt)("strong",{parentName:"p"},"git")," repositories."),(0,o.kt)("p",null,"Each repositories are ",(0,o.kt)("em",{parentName:"p"},"cloned")," then ",(0,o.kt)("em",{parentName:"p"},"pulled")," at regular interval (",(0,o.kt)("inlineCode",{parentName:"p"},"cache-duration"),")."),(0,o.kt)("p",null,"The repositories can be set manually or be discovered from ",(0,o.kt)("strong",{parentName:"p"},"Github"),"."),(0,o.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"This provider requires ",(0,o.kt)("inlineCode",{parentName:"p"},"git")," to be available on the host."),(0,o.kt)("p",null,"Also if you are intending to use Protobuf specification files, you need to have ",(0,o.kt)("inlineCode",{parentName:"p"},"protoc")," available."),(0,o.kt)("p",null,"If you are using the docker image, there is ",(0,o.kt)("strong",{parentName:"p"},"no need")," to install them."),(0,o.kt)("h2",{id:"default-configuration"},"Default configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocon"},'unisonui {\n  providers += "tech.unisonui.providers.GitProvider"\n\n  provider.git {\n    cache-duration = "2 hours" // Interval between each clone....\n    vcs {\n      // Discover repositories through Github API\n      github {\n        api-token = "" // Github personal token.\n        api-uri = "https://api.github.com/graphql" // Github GraphQL url.\n        polling-interval = "1 hour" // Interval between each polling.\n        repositories = [] // List of repositories.\n      }\n      git {\n        repositories = [] // List of repositories\n      }\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Either you choose using ",(0,o.kt)("strong",{parentName:"p"},"Github")," discovery or plain ",(0,o.kt)("strong",{parentName:"p"},"git")," repositories,\neach option requires a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"repositories"),".\nThis list can be either a ",(0,o.kt)("strong",{parentName:"p"},"string")," corresponding to\nthe full URL/Regex (",(0,o.kt)("inlineCode",{parentName:"p"},"organization/project")," for Github) or on an object."),(0,o.kt)("p",null,"The object follows the following schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  location = "" // Full url, `organization/project` for Github\n                // or a regex (the string **MUST** starts and ends with `/`)\n  branch = "" // Branch to clone (default to `master` or inferred from the default branch in Github)\n}\n')),(0,o.kt)("h2",{id:"specifications-detection"},"Specifications detection"),(0,o.kt)("p",null,"If the repository contains a file at the root level called ",(0,o.kt)("inlineCode",{parentName:"p"},".unisonui.yaml")," then the Git provider will\ndetect the specification files accordingly."),(0,o.kt)("p",null,"The git provider currently support two versions of this file."),(0,o.kt)("h3",{id:"version-2"},"Version 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "2"\n\n# Optional service\'s name.\n# If not provided the name will be inferred from the repository URL\n# Example: "https://github.com/MyOrg/MyRepo" -> "MyOrg/MyOrg"\nname: "My service"\n\nopenapi:\n  # Enable or disable the proxy for all specification files.\n  # It\'s disabled by default.\n  # Enable it if your endpoint doesn\'t support CORS\n  useProxy: false\n\n  # List of specifications\n  # Can be either a string representing the path where files are located\n  # or a an object with advanced configuration.\n  specifications:\n    - "foo-service.yaml"\n    - "/directory_contening_several_files/"\n    - name: "Name used for this file" # Override the service\'s name for this file\n      path: "foobar.yaml" # File path\n      useProxy: true # Override the proxy configuration\n\ngrpc:\n  # List of endpoints where your service lives.\n  servers:\n    - address: 127.0.0.1 # IP or hostname\n      port: 8080 # Port\n      # Enable TLS communication.\n      # False by default.\n      # Warning, be sure to make your self-certificate available to UnisonUI.\n      useTls: false\n      # Optional name for this endpoint.\n      # If omitted, the endpoint\'s name will be: host:port\n      name: "Dev"\n  # List of protobufs files\n  # It requires a map. "protobuf file path" -> object\n  protobufs:\n    "path/spec.proto": {}\n    "path/spec2.proto":\n      name: test # Override the service\'s name for this file\n      # Override ENTIRELY the servers list for this file\n      servers:\n        - address: 127.0.0.1\n          port: 8080\n          name: other server\n          useTls: true\n')),(0,o.kt)("h3",{id:"version-1"},"Version 1"),(0,o.kt)("p",null,"Only file named ",(0,o.kt)("inlineCode",{parentName:"p"},".restui.yaml")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},".unisonui.yaml")," supports this version, for retro compatibility reason."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# Service\'s name.\n# If this field does not provide the service name will be inferred from the repository URL\n# Example: "https://github.com/MyOrg/MyRepo" -> "MyOrg/MyOrg"\nname: "service name"\n\n# useProxy activate the proxy for the interface. Otherwise your service might needs to activate CORS\nuseProxy: true\n\n# List of OpenApi spec files or directories\n# This list can be a mixed of string (path)\n# or an object:\n#   name: Name of this service\n#   useProxy: activate the proxy for the interface. Otherwise your service might needs to activate CORS\nspecifications: []\n')),(0,o.kt)("h2",{id:"github-configuration"},"Github configuration"),(0,o.kt)("p",null,"If you intend to use the Github repositories discovery you need to provide a token."),(0,o.kt)("p",null,"This token can be generated ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"https://github.com/settings/tokens/new"},"here")),"."),(0,o.kt)("p",null,"You will need to allow:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"public_repo")," if you want to list only public repositories"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"repo")," if want to list public and private repositories")))}d.isMDXComponent=!0}}]);