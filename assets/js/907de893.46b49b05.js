"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[411],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(v,a(a({ref:n},c),{},{components:t})):r.createElement(v,a({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7243:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],l={sidebar_position:2,title:"Container provider",description:"How to use the container provider"},s="Container provider",p={unversionedId:"providers/container",id:"version-1.0.0/providers/container",title:"Container provider",description:"How to use the container provider",source:"@site/versioned_docs/version-1.0.0/providers/container.md",sourceDirName:"providers",slug:"/providers/container",permalink:"/docs/providers/container",tags:[],version:"1.0.0",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Container provider",description:"How to use the container provider"},sidebar:"tutorialSidebar",previous:{title:"Git provider",permalink:"/docs/providers/git"},next:{title:"Webhook provider",permalink:"/docs/providers/webhook"}},c=[{value:"Default configuration",id:"default-configuration",children:[],level:2},{value:"GRPC specification support",id:"grpc-specification-support",children:[],level:2},{value:"Docker services discovery",id:"docker-services-discovery",children:[{value:"Usage",id:"usage",children:[],level:3}],level:2},{value:"Kubernetes services discovery",id:"kubernetes-services-discovery",children:[{value:"Usage",id:"usage-1",children:[],level:3}],level:2}],u={toc:c};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"container-provider"},"Container provider"),(0,o.kt)("p",null,"The container provider allow ",(0,o.kt)("em",{parentName:"p"},"UnisonUI")," to discover services through ",(0,o.kt)("inlineCode",{parentName:"p"},"Docker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Kubernetes")),(0,o.kt)("h2",{id:"default-configuration"},"Default configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'unisonui {\n  providers += "tech.unisonui.providers.ContainerProvider"\n  provider.container {\n      kubernetes {\n        enabled = yes // Enable discovery through Kubernetes\n        polling-interval = "1 minute" // Interval between each Kubernetes API.\n      }\n\n      docker {\n        enabled = yes // Enable discovery through Docker\n        host =  "unix:///var/run/docker.sock" // Host of the docker daemon\n      }\n\n      // List of labels used by the provider to detect specification files\n      labels {\n        service-name = "unisonui.service-name" // Service name. This label is mandatory.\n\n        openapi {\n          port  = "unisonui.openapi.port" // HTTP port where the openapi specification file can be found.\n          protocol  = "unisonui.openapi.protocol" // Protocol to use (default to http)\n          specification-path = "unisonui.openapi.path" // URI of the openapi specification file. Default to /specification.yaml\n          use-proxy = "unisonui.openapi.use-proxy" // Should enable the proxy for this service (disabled by default)\n        }\n\n        grpc {\n          port = "unisonui.grpc.port" // GRPC port where the reflection server can be contacted.\n          tls = "unisonui.grpc.tls" // Disabled by default. Tell the GRPC to use a TLS connection.\n        }\n      }\n    }\n}\n')),(0,o.kt)("h2",{id:"grpc-specification-support"},"GRPC specification support"),(0,o.kt)("p",null,"Both providers support GRPC specifications using."),(0,o.kt)("p",null,"In order to retrieve those specifications, your services need to expose the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/grpc/grpc/blob/master/doc/server-reflection.md"},"GRPC server reflection protocol"),"."),(0,o.kt)("h2",{id:"docker-services-discovery"},"Docker services discovery"),(0,o.kt)("p",null,"The docker services discovery list and detect all running containers in real time."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Warning: the docker provider DOES NOT support TLS connection yet")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"A compatible container ",(0,o.kt)("strong",{parentName:"p"},"MUST")," include the following labels:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A label specifying the service's name ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.service-name")),(0,o.kt)("li",{parentName:"ul"},"A label specifying the port where the OpenApi spec lays ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.openapi.port")," for OpenApi specifications."),(0,o.kt)("li",{parentName:"ul"},"A label specifying the port where the GRPC spec lays ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.grpc.port")," for GRPC specifications.")),(0,o.kt)("p",null,"Optional labels:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A label specifying the path where the OpenApi spec lays ",(0,o.kt)("inlineCode",{parentName:"p"},"unisonui.openapi.path"),"."),(0,o.kt)("p",{parentName:"li"},"Default path: ",(0,o.kt)("inlineCode",{parentName:"p"},"/specification.yaml")))),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'docker  run --rm -l "unisonui.port=80" -l "unisonui.service-name=nginx" -v $(pwd):/usr/share/nginx/html:ro nginx:alpine\n')),(0,o.kt)("h2",{id:"kubernetes-services-discovery"},"Kubernetes services discovery"),(0,o.kt)("p",null,"The Kubernetes services discovery lists and detects all running services in real time."),(0,o.kt)("p",null,"In order to discover specifications in Kubernetes, ",(0,o.kt)("em",{parentName:"p"},"UnisonUI")," ",(0,o.kt)("strong",{parentName:"p"},"MUST")," run inside the same Kubernetes cluster of your services you want to be discovered."),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("p",null,"New services are detected by polling from the Kubernetes API at a regular interval.\nThe value for the interval is defined by ",(0,o.kt)("inlineCode",{parentName:"p"},"polling-interval")," which default to ",(0,o.kt)("inlineCode",{parentName:"p"},"1 minute"),"."),(0,o.kt)("p",null,"A compatible service ",(0,o.kt)("strong",{parentName:"p"},"MUST")," have the following labels on it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A label specifying the service's name ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.service-name")),(0,o.kt)("li",{parentName:"ul"},"A label specifying the port where the OpenApi spec lays ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.openapi.port")," for OpenApi specifications."),(0,o.kt)("li",{parentName:"ul"},"A label specifying the port where the GRPC spec lays ",(0,o.kt)("inlineCode",{parentName:"li"},"unisonui.grpc.port")," for GRPC specifications.")),(0,o.kt)("p",null,"Optional labels:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A label specifying the path where the OpenApi spec lays ",(0,o.kt)("inlineCode",{parentName:"p"},"unisonui.openapi.path"),"."),(0,o.kt)("p",{parentName:"li"},"Default path is: ",(0,o.kt)("inlineCode",{parentName:"p"},"/specification.yaml")))),(0,o.kt)("p",null,"Also the services ",(0,o.kt)("strong",{parentName:"p"},"MUST")," have a ",(0,o.kt)("inlineCode",{parentName:"p"},"ClusterIP")," (the provider will infer the address from the ",(0,o.kt)("inlineCode",{parentName:"p"},"ClusterIP"),")"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    unisonui.openapi.port: "80"\n    unisonui.openapi.protocol: http\n  name: specification\n  namespace: default\nspec:\n  clusterIP: 10.96.0.2\n  ports:\n  - name: 80tcp02\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    selector: deployment\n  sessionAffinity: None\n  type: ClusterIP\nstatus:\n  loadBalancer: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    selector: deployment\n  name: openapi\n  namespace: default\nspec:\n  progressDeadlineSeconds: 600\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      selector: deployment\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        selector: deployment\n    spec:\n      containers:\n      - image: nginx:alpine\n        imagePullPolicy: Always\n        name: openapi\n        ports:\n        - containerPort: 80\n          name: 80tcp02\n          protocol: TCP\n        resources: {}\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities: {}\n          privileged: false\n          readOnlyRootFilesystem: false\n          runAsNonRoot: false\n        stdin: true\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        tty: true\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext: {}\n      terminationGracePeriodSeconds: 30\n')))}d.isMDXComponent=!0}}]);